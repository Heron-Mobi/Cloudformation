AWSTemplateFormatVersion: 2010-09-09
Description: API Gateway for dashboard
Parameters:
  CertARN:
    Type: String
  DomainName:
    Type: String
  HostedZone:
    Type: String
Resources:
  HeronApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: HeronAPI
      DisableExecuteApiEndpoint: False
  ApiDomainName:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      CertificateArn: !Ref CertARN
      DomainName:
        !Join
          - '.' 
          - - 'api'
            - !Ref DomainName
  ApiMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref HeronApi
  DNSRecordSets:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !Ref HostedZone
      RecordSets:
        - Name: 
            !Join
              - '.' 
              - - 'api'
                - !Ref DomainName
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt ApiDomainName.DistributionDomainName

  Authorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      IdentitySource: method.request.header.Authorization
      Name: CognitoUser
      ProviderARNs:
        - !Join
          - '/'
          - - !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool'
            - '{{resolve:ssm:/heron/user-pool-id}}'
      RestApiId: !Ref HeronApi
      Type: COGNITO_USER_POOLS
  HeronModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref HeronApi
      Schema: {}

  HeronStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref HeronDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref HeronApi
      StageName: 'v0'

  HeronDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: VideoGetMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref HeronApi

  HeronApiIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource:
                  - !GetAtt GetVideos.Arn
                  - !GetAtt DeleteVideo.Arn
                  - !GetAtt CORSOptions.Arn
                  - !GetAtt GetSignals.Arn
                  - !GetAtt PutSignals.Arn
                  - !GetAtt GetTwitterLink.Arn
                  - !GetAtt SetTwitterToken.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: LambdaAPIssmAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: 'Allow'
              Action: 
                - 'ssm:GetParameter'
              Resource:
                - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/heron/identity-pool-id'
                - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/heron/user-pool-id'
                - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/heron/video-bucket-name'
                - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/heron/config-bucket-name'
  
  TwitterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: TwitterLambdaSSmandSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: 'Allow'
              Action: 
                - 'ssm:GetParameter'
              Resource:
                - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/heron/identity-pool-id'
                - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/heron/user-pool-id'
                - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/heron/config-bucket-name'
                - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/heron/heron-dashboard-domain'
            - Effect: 'Allow'
              Action: 
                - 'secretsmanager:GetSecretValue'
              Resource:
                - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:heron/integrations/twitter-??????'

  CORSOptions:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS Lambda function
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        S3Bucket: '{{resolve:ssm:/heron/deploy-resource-bucket-name}}'
        S3Key: 
          !Join
            - '/'
            - - 'lambdas'
              - 'api-cors-origin'
              - '{{resolve:ssm:/heron/latest/lambda-build}}'
              - 'index.zip'
  UserSessionLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: UserSession
      Description: My Lambda Layer
      Content:
        S3Bucket: '{{resolve:ssm:/heron/deploy-resource-bucket-name}}'
        S3Key: 
          !Join
            - '/'
            - - 'lambdas'
              - 'layer-user-session'
              - '{{resolve:ssm:/heron/latest/lambda-build}}'
              - 'index.zip'
      CompatibleRuntimes:
        - python3.10
###
# Video Resource and Methods
###
  VideoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt HeronApi.RootResourceId
      RestApiId: !Ref HeronApi
      PathPart: 'videos'
  
  VideoCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt HeronApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CORSOptions.Arn}/invocations'
      OperationName: 'CORS Options'
      ResourceId: !Ref VideoResource
      RestApiId: !Ref HeronApi

  VideoGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt HeronApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetVideos.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref VideoResource
      RestApiId: !Ref HeronApi

  VideoDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt HeronApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteVideo.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref VideoResource
      RestApiId: !Ref HeronApi

  GetVideos:
    Type: AWS::Lambda::Function
    Properties:
      Description: GetUserVideos
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        S3Bucket: '{{resolve:ssm:/heron/deploy-resource-bucket-name}}'
        S3Key: 
          !Join
            - '/'
            - - 'lambdas'
              - 'api-get-videos'
              - '{{resolve:ssm:/heron/latest/lambda-build}}'
              - 'index.zip'
      Layers:
        - !Ref UserSessionLayer
  DeleteVideo:
    Type: AWS::Lambda::Function
    Properties:
      Description: Delete a user video
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        S3Bucket: '{{resolve:ssm:/heron/deploy-resource-bucket-name}}'
        S3Key: 
          !Join
            - '/'
            - - 'lambdas'
              - 'api-delete-video'
              - '{{resolve:ssm:/heron/latest/lambda-build}}'
              - 'index.zip'
      Layers:
        - !Ref UserSessionLayer

###
# Video Resource and Methods
###
  SignalResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt HeronApi.RootResourceId
      RestApiId: !Ref HeronApi
      PathPart: 'signals'
  
  SignalsCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt HeronApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CORSOptions.Arn}/invocations'
      OperationName: 'CORS Options'
      ResourceId: !Ref SignalResource
      RestApiId: !Ref HeronApi

  SignalsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt HeronApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSignals.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref SignalResource
      RestApiId: !Ref HeronApi

  SignalsPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt HeronApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutSignals.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref SignalResource
      RestApiId: !Ref HeronApi

  GetSignals:
    Type: AWS::Lambda::Function
    Properties:
      Description: Get Signals Config
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        S3Bucket: '{{resolve:ssm:/heron/deploy-resource-bucket-name}}'
        S3Key: 
          !Join
            - '/'
            - - 'lambdas'
              - 'api-get-signals'
              - '{{resolve:ssm:/heron/latest/lambda-build}}'
              - 'index.zip'
      Layers:
        - !Ref UserSessionLayer


  PutSignals:
    Type: AWS::Lambda::Function
    Properties:
      Description: Set Signals Config
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        S3Bucket: '{{resolve:ssm:/heron/deploy-resource-bucket-name}}'
        S3Key: 
          !Join
            - '/'
            - - 'lambdas'
              - 'api-put-signals'
              - '{{resolve:ssm:/heron/latest/lambda-build}}'
              - 'index.zip'
      Layers:
        - !Ref UserSessionLayer


###
# Integrations Resource and Methods
###
  IntegrationResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt HeronApi.RootResourceId
      RestApiId: !Ref HeronApi
      PathPart: 'integrations'
  
  IntegrationsCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt HeronApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CORSOptions.Arn}/invocations'
      OperationName: 'CORS Options'
      ResourceId: !Ref IntegrationResource
      RestApiId: !Ref HeronApi

  IntegrationTwitterResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt IntegrationResource.ResourceId
      RestApiId: !Ref HeronApi
      PathPart: 'twitter'

  TwitterCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt HeronApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CORSOptions.Arn}/invocations'
      OperationName: 'CORS Options'
      ResourceId: !Ref IntegrationTwitterResource
      RestApiId: !Ref HeronApi

  TwitterGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt HeronApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTwitterLink.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref IntegrationTwitterResource
      RestApiId: !Ref HeronApi

  TwitterSetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt HeronApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SetTwitterToken.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref IntegrationTwitterResource
      RestApiId: !Ref HeronApi
  TweepyLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: TweepyOverrides
      Description: My Lambda Layer
      Content:
        S3Bucket: '{{resolve:ssm:/heron/deploy-resource-bucket-name}}'
        S3Key: 
          !Join
            - '/'
            - - 'lambdas'
              - 'layer-twitter'
              - '{{resolve:ssm:/heron/latest/lambda-build}}'
              - 'index.zip'
      CompatibleRuntimes:
        - python3.10
  GetTwitterLink:
    Type: AWS::Lambda::Function
    Properties:
      Description: Get Twitter Link For Auth
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt TwitterLambdaRole.Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        S3Bucket: '{{resolve:ssm:/heron/deploy-resource-bucket-name}}'
        S3Key: 
          !Join
            - '/'
            - - 'lambdas'
              - 'api-get-twitter-link'
              - '{{resolve:ssm:/heron/latest/lambda-build}}'
              - 'index.zip'
      Layers:
        - !Ref TweepyLayer
        - !Ref UserSessionLayer
  SetTwitterToken:
    Type: AWS::Lambda::Function
    Properties:
      Description: Set Twitter Token For Auth
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt TwitterLambdaRole.Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        S3Bucket: '{{resolve:ssm:/heron/deploy-resource-bucket-name}}'
        S3Key: 
          !Join
            - '/'
            - - 'lambdas'
              - 'api-set-twitter-token'
              - '{{resolve:ssm:/heron/latest/lambda-build}}'
              - 'index.zip'
      Layers:
        - !Ref TweepyLayer
        - !Ref UserSessionLayer
  
  ApiGatewayParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/heron/apigateway-id'
      Type: String
      Value: !Ref HeronApi
  ApiDomain:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/heron/heron-api-domain'
      Type: String
      Value: 
        !Join
          - '.' 
          - - 'api'
            - !Ref DomainName
  TweepyLayerParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/heron/heron-lambda-layer-tweepy'
      Type: String
      Value: !Ref TweepyLayer
