import tweepy
from requests.auth import HTTPBasicAuth
from requests_oauthlib import OAuth2Session

##
# Export code_verifier to be used in two different lambda instances
# https://stackoverflow.com/questions/74649514/how-to-recreate-tweepy-oauth2userhandler-across-web-requests
##


class TweepyVerifierOAuth2UserHandler(OAuth2Session):
    def __init__(
        self,
        client_id: str,
        client_secret: str,
        redirect_uri: str,
        scope: list[str],
        code_verifier: str | None = None,
    ):
        super().__init__(client_id, redirect_uri=redirect_uri, scope=scope)
        self.auth = HTTPBasicAuth(client_id, client_secret)
        self.code_verifier = code_verifier or str(
            self._client.create_code_verifier(128)
        )

    def get_authorization_url(self) -> str:
        url, state_seems_unnecessary = self.authorization_url(
            "https://twitter.com/i/oauth2/authorize",
            code_challenge=self._client.create_code_challenge(
                self.code_verifier, "S256"
            ),
            code_challenge_method="S256",
        )
        return url

    def fetch_token(self, authorization_response):
        return super().fetch_token(
            "https://api.twitter.com/2/oauth2/token",
            authorization_response=authorization_response,
            auth=self.auth,
            include_client_id=True,
            code_verifier=self.code_verifier,
        )


##
# Implement refresh of token
# https://github.com/tweepy/tweepy/pull/1806
##


class TweepyRefreshAuth2UserHandler(tweepy.OAuth2UserHandler):
    def refresh_token(self, refresh_token):
        new_token = super().refresh_token(
            "https://api.twitter.com/2/oauth2/token",
            refresh_token=refresh_token,
            body=f"grant_type=refresh_token&client_id={self.client_id}",
        )
        return new_token
